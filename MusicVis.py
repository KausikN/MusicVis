"""
Visualiser for music and audio using python

# Libraries

## Music Generators
 - These are libraries to generate and form music files from input data
 - Generally input is some form of array of numbers and parameters to granularly control the sounds in the music
 - These granular atomic elements as "notes"
 - Currently supported,
    - Piano
        - Generate MIDI audio files from input notes and parameters

## Note Generators
 - These are libraries to generate the notes used by music generators to generate music
 - They use some mathematical distributions and functions to generate the sequence of notes that form the music
 - Generally input contains,
    - Parameters to control the generation of notes
    - Possible values for the notes (numbers, indices, etc)
    - Other parameters like length of sequence, etc
 - Currently supported,
    - Random Sequence
        - Generates a randomised sequence of notes
        - Each new note is generated by selecting from all the notes with each note having a defined probability
        - This probability distribution can be constant or calculated at each iteration based on the already generated sequence

## Visualisers
 - These are libraries to visualise the generated music and notes
 - Generally input contains,
    - Sequence of notes that form the music
    - Other parameters
 - Currently supported,
    - MIDI Board
        - Visualise the notes as a MIDI Plot
        - Each track is visualised as a separate plot since tracks are independent of each other
    - Circle Bouncer
        - Since number of possible notes is constant, we partition the circumference of the circle with the notes with equal spacing
        - Sequence of notes is visualised as a pointer moving from one note marker on the circumference to another with a trail
        - Each track is visualised as a separate pointer since tracks are independent of each other
        - This is purely sequential and hence for overlapping notes, the pointer takes the position of the latest note it encountered
            - I.e. pointer movement is based on delay parameter and not on duration, hence if 2 notes overlap the pointer stays on the older note only till the delay for the next note is over
        
        - 


"""

# Imports
## Util Imports
from Libraries.Utils.AudioUtils import *
## Music Generator Imports
from Libraries.MusicGenerators import MusicGenerator_Piano
## Note Generator Imports
from Libraries.NoteGenerators import NoteGenerator_RandomSequence
## Visualiser Imports
from Libraries.Visualisers import Visualiser_MIDIPlot
from Libraries.Visualisers import Visualiser_CircleBouncer

# Main Vars
LIBRARIES = {
    "MusicGenerator": {
        "Piano": MusicGenerator_Piano
    },
    "NoteGenerator": {
        "RandomSequence": NoteGenerator_RandomSequence
    },
    "Visualisers": {
        "MIDIPlot": Visualiser_MIDIPlot,
        "CircleBouncer": Visualiser_CircleBouncer
    }
}

# Main Functions


# RunCode